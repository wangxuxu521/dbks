<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Import Salary</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
        }
        th {
            position: sticky;
            top: 0;
            background-color: #f8f9fa;
            z-index: 1;
        }
        .header-row input[type="checkbox"] {
            margin-left: 10px;
        }
        .highlight {
            background-color: #dff0d8;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2>导入薪资数据</h2>
        <form id="upload-form" method="post" enctype="multipart/form-data" action="/Administrator/ImportSalary">
            <input type="file" id="file-input" name="file" class="form-control mb-3" required />
            <button type="button" id="select-all-btn" class="btn btn-primary mb-3">全选</button>
            <button type="button" id="confirm-btn" class="btn btn-success mb-3">确认</button>
            <input type="hidden" id="selected-columns" name="selectedColumns" />
        </form>
        <div id="file-preview" class="table-responsive"></div>
    </div>

    <script src="https://cdn.sheetjs.com/xlsx-0.16.9/package/dist/xlsx.full.min.js"></script>
    <script>
        document.getElementById('file-input').addEventListener('change', handleFile, false);
        document.getElementById('select-all-btn').addEventListener('click', selectAllColumns, false);
        document.getElementById('confirm-btn').addEventListener('click', confirmSelection, false);

        const requiredColumns = ['SalaryID', 'Basic_salary', 'Bonus', 'PayDate'];

        function handleFile(event) {
            const file = event.target.files[0];
            const reader = new FileReader();

            reader.onload = function(e) {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {type: 'array'});
                previewFile(workbook);
            };

            reader.readAsArrayBuffer(file);
        }

        function previewFile(workbook) {
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const json = XLSX.utils.sheet_to_json(worksheet, {header: 1});

            const previewDiv = document.getElementById('file-preview');
            previewDiv.innerHTML = '<h3 class="mt-3">文件预览</h3>';

            const table = document.createElement('table');
            table.className = 'table table-bordered';

            // 添加表头
            const headerRow = json[0];
            const headerTr = document.createElement('tr');
            headerTr.className = 'header-row';

            headerRow.forEach(function(header, index) {
                const th = document.createElement('th');
                th.textContent = header;

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'checkbox';
                checkbox.dataset.header = header;
                checkbox.dataset.index = index;

                th.appendChild(checkbox);
                headerTr.appendChild(th);
            });

            table.appendChild(headerTr);

            // 添加数据行
json.slice(1).forEach(function(row) {
                const tr = document.createElement('tr');

                headerRow.forEach(function(header, index) {
                    const td = document.createElement('td');
                    const cell = row[index];
                    if (cell !== undefined && cell !== null) {
                        // 尝试检测日期序列号并转换
                        if (typeof cell === 'number' && isFinite(cell) && cell > 1) {
                            const date = new Date((cell - 1) * 86400000 + Date.UTC(1900, 0, 1));
                            if (date.getFullYear() > 1900) {
                                td.textContent = date.toISOString().split('T')[0]; // 只取日期部分
                            } else {
                                td.textContent = cell.toString();
                            }
                        } else {
                            td.textContent = cell.toString();
                        }
                    } else {
                        td.textContent = '';
                    }
                    tr.appendChild(td);
                });

                table.appendChild(tr);
            });

            previewDiv.appendChild(table);

            // 添加选择列的功能
            const checkboxes = document.querySelectorAll('.checkbox');
            checkboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    const index = parseInt(this.dataset.index);
                    toggleColumnHighlight(table, index, this.checked);
                });
            });
        }

        function toggleColumnHighlight(table, columnIndex, highlight) {
            const rows = table.getElementsByTagName('tr');
            for (let i = 0; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName(i === 0 ? 'th' : 'td');
                if (cells[columnIndex]) {
                    if (highlight) {
                        cells[columnIndex].classList.add('highlight');
                    } else {
                        cells[columnIndex].classList.remove('highlight');
                    }
                }
            }
        }

        function selectAllColumns() {
            const checkboxes = document.querySelectorAll('.checkbox');
            checkboxes.forEach(function(checkbox) {
                checkbox.checked = true;
                const index = parseInt(checkbox.dataset.index);
                toggleColumnHighlight(document.querySelector('table'), index, true);
            });
        }

        function confirmSelection() {
            const selectedHeaders = Array.from(document.querySelectorAll('.checkbox'))
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.dataset.header);

            const missingRequiredColumns = requiredColumns.filter(column => !selectedHeaders.includes(column));

            if (missingRequiredColumns.length > 0) {
                alert('Missing required columns: ' + missingRequiredColumns.join(', '));
            } else {
                console.log('Selected headers:', selectedHeaders);
                alert('Selected headers: ' + selectedHeaders.join(', '));
                document.getElementById('selected-columns').value = selectedHeaders.join(',');
                document.getElementById('upload-form').submit();
            }
        }
    </script>
</body>
</html>